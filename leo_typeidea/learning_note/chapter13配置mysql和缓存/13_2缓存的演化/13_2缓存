13.2.1 什么是缓存
    见learn_cache.py cachetest.py
13.2.2 缓存装饰器
    见cache_functools.py
13.2.3 增强缓存装饰器
    见power_cache_Decorator.py   cache_functools2.py
13.2.4 redis
    若无必要，勿增实体
13.2.5 继续演变缓存逻辑
    支持多线程
13.2.6 Django中的缓存配置
    1. urls.py中增加
        from django.views.decorators.cache import cache_page
        url(r'^sitemap\.xml$', cache_page(60 * 20, key_prefix='sitemap_cache_'),
            sitemap_views.sitemap, {'sitemaps': {'posts': PostSitemap}}),
    2. 内置缓存配置
        1. local-memory catching    内存缓存，线程安全，进程间独立
            CACHES = {
                'default': {
                    'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
                    'LOCATION': 'unique-snowflake',
                }
            }
        2. filesystem caching       缓存到文件系统中
            CACHES = {
                'default': {
                    'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
                    'LOCATION': '/var/tmp/django-cache',
                }
            }
        3. database caching         数据库缓存，需要创建缓存用的表，意义不大
            CACHES = {
                'default': {
                    'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
                    'LOCATION': 'my_cache_table',
                }
            }
        4. memcached                django推荐缓存系统，分布式，django内置支持，集成性较好
            CACHES = {
                'default': {
                    'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
                    'LOCATION': [
                        '172.19.26.240:11211',
                        '172.19.26.242:11211'
                    ],
                }
            }
13.2.7 配置redis缓存
    1. 安装包
        pip install django-redis==4.9.0
        pip install hiredis==0.2.0
    2. 配置缓存 setting中
        REDIS_URL = '127.0.0.1:6379:1'

        CACHES = {
            'default': {
                'BACKEND': 'django_redis.cache.RedisCache',
                'LOCATION': REDIS_URL,
                'TIMEOUT': 300,
                'OPTIONS': {
                    # 'PASSWORD':'密码'，
                    'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                    'PARSER_CLASS': 'redis.connection.HiredisParser',
                },
                'CONNECTION_POOL_CLASS': 'redis.connection.BlockingConnectionPool'
            }
        }
13.2.8 应用场景和缓存粒度
    1. 整站缓存：        简单粗暴，不推荐用
        直接在setting中MIDDLEWARE第一行增加‘django.middleware.cache.UpdateCacheMiddleware’
    2. 整个页面缓存       比如setmap的缓存
    3. 局部数据缓存：     某部分逻辑的缓存
        例:
        1）model层：
            from django.core.cache import cache

            class Post(models.Model):
                略...
                @classmethod
                def hot_posts(cls):
                    result = cache.get('hot_posts')
                    if not result:
                        result = cls.objects.filter(status=cls.STATUS_NORMAL).order_by('-pv')
                        cache.set('hot_posts', result, 10 * 60)
                    return result
        2）模板数据
            {% load cache %}
            {% cache 50 sidebar %}
                ....
            {% endcache %}